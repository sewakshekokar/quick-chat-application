{"ast":null,"code":"import{useDispatch,useSelector}from\"react-redux\";import{createNewMessage,getAllMessages}from\"../../../apiCalls/message\";import{hideLoader,showLoader}from\"../../../redux/loaderSlice\";import toast from\"react-hot-toast\";import{useEffect,useState}from\"react\";import{clearUnreadMessageCount}from'./../../../apiCalls/chat';import moment from\"moment\";import store from'./../../../redux/store';import{setAllChats,setSelectedChat}from\"../../../redux/usersSlice\";import EmojiPicker from\"emoji-picker-react\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function ChatArea(_ref){let{socket}=_ref;const dispatch=useDispatch();const{selectedChat,user,allChats}=useSelector(state=>state.userReducer);const selectedUser=selectedChat.members.find(u=>u._id!==user._id);const[message,setMessage]=useState('');const[allMessages,setAllMessages]=useState([]);const[isTyping,setIsTyping]=useState(false);const[showEmojiPicker,setShowEmojiPicker]=useState(false);const[data,setData]=useState(null);const sendMessage=async image=>{try{const newMessage={chatId:selectedChat._id,sender:user._id,text:message,image:image};socket.emit('send-message',{...newMessage,members:selectedChat.members.map(m=>m._id),read:false,createdAt:moment().format(\"YYYY-MM-DD HH:mm:ss\")});const response=await createNewMessage(newMessage);if(response.success){setMessage('');setShowEmojiPicker(false);}}catch(error){toast.error(error.message);}};const formatTime=timestamp=>{const now=moment();const diff=now.diff(moment(timestamp),'days');if(diff<1){return`Today ${moment(timestamp).format('hh:mm A')}`;}else if(diff===1){return`Yesterday ${moment(timestamp).format('hh:mm A')}`;}else{return moment(timestamp).format('MMM D, hh:mm A');}};const getMessages=async()=>{try{dispatch(showLoader());const response=await getAllMessages(selectedChat._id);dispatch(hideLoader());if(response.success){setAllMessages(response.data);}}catch(error){dispatch(hideLoader());toast.error(error.message);}};const clearUnreadMessages=async()=>{try{socket.emit('clear-unread-messages',{chatId:selectedChat._id,members:selectedChat.members.map(m=>m._id)});const response=await clearUnreadMessageCount(selectedChat._id);if(response.success){allChats.map(chat=>{if(chat._id===selectedChat._id){return response.data;}return chat;});}}catch(error){toast.error(error.message);}};function formatName(user){let fname=user.firstname.at(0).toUpperCase()+user.firstname.slice(1).toLowerCase();let lname=user.lastname.at(0).toUpperCase()+user.lastname.slice(1).toLowerCase();return fname+' '+lname;}const sendImage=async e=>{const file=e.target.files[0];const reader=new FileReader(file);reader.readAsDataURL(file);reader.onloadend=async()=>{sendMessage(reader.result);};};useEffect(()=>{var _selectedChat$lastMes;getMessages();if((selectedChat===null||selectedChat===void 0?void 0:(_selectedChat$lastMes=selectedChat.lastMessage)===null||_selectedChat$lastMes===void 0?void 0:_selectedChat$lastMes.sender)!==user._id){clearUnreadMessages();}socket.off('receive-message').on('receive-message',message=>{const selectedChat=store.getState().userReducer.selectedChat;if(selectedChat._id===message.chatId){setAllMessages(prevmsg=>[...prevmsg,message]);}if(selectedChat._id===message.chatId&&message.sender!==user._id){clearUnreadMessages();}});socket.on('message-count-cleared',data=>{const selectedChat=store.getState().userReducer.selectedChat;const allChats=store.getState().userReducer.allChats;if(selectedChat._id===data.chatId){//UPDATING UNREAD MESSAGE COUNT IN CHAT OBJECT\nconst updatedChats=allChats.map(chat=>{if(chat._id===data.chatId){return{...chat,unreadMessageCount:0};}return chat;});dispatch(setAllChats(updatedChats));//UPDATING READ PROPRTY IN MESSAGE OBJECT\nsetAllMessages(prevMsgs=>{return prevMsgs.map(msg=>{return{...msg,read:true};});});}});socket.on('started-typing',data=>{setData(data);if(selectedChat._id===data.chatId&&data.sender!==user._id){setIsTyping(true);setTimeout(()=>{setIsTyping(false);},2000);}});},[selectedChat]);useEffect(()=>{const msgContainer=document.getElementById('main-chat-area');msgContainer.scrollTop=msgContainer.scrollHeight;},[allMessages,isTyping]);return/*#__PURE__*/_jsx(_Fragment,{children:selectedChat&&/*#__PURE__*/_jsxs(\"div\",{class:\"app-chat-area\",children:[/*#__PURE__*/_jsx(\"div\",{class:\"app-chat-area-header\",children:formatName(selectedUser)}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-chat-area\",id:\"main-chat-area\",children:[allMessages.map(msg=>{const isCurrentUserSender=msg.sender===user._id;return/*#__PURE__*/_jsx(\"div\",{className:\"message-container\",style:isCurrentUserSender?{justifyContent:'end'}:{justifyContent:'start'},children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:isCurrentUserSender?\"send-message\":\"received-message\",children:[/*#__PURE__*/_jsx(\"div\",{children:msg.text}),/*#__PURE__*/_jsx(\"div\",{children:msg.image&&/*#__PURE__*/_jsx(\"img\",{src:msg.image,alt:\"image\",height:\"120\",width:\"120\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"message-timestamp\",style:isCurrentUserSender?{float:'right'}:{float:'left'},children:[formatTime(msg.createdAt),\" \",isCurrentUserSender&&msg.read&&/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-check-circle\",\"aria-hidden\":\"true\",style:{color:'#e74c3c'}})]})]})});}),/*#__PURE__*/_jsx(\"div\",{className:\"typing-indicator\",children:isTyping&&(selectedChat===null||selectedChat===void 0?void 0:selectedChat.members.map(m=>m._id).includes(data===null||data===void 0?void 0:data.sender))&&/*#__PURE__*/_jsx(\"i\",{children:\"typing...\"})})]}),showEmojiPicker&&/*#__PURE__*/_jsx(\"div\",{style:{width:'100%',display:'flex',padding:'0px 20px',justifyContent:'right'},children:/*#__PURE__*/_jsx(EmojiPicker,{style:{width:'300px',height:'400px'},onEmojiClick:e=>setMessage(message+e.emoji)})}),/*#__PURE__*/_jsxs(\"div\",{className:\"send-message-div\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"send-message-input\",placeholder:\"Type a message\",value:message,onChange:e=>{setMessage(e.target.value);socket.emit('user-typing',{chatId:selectedChat._id,members:selectedChat.members.map(m=>m._id),sender:user._id});}}),/*#__PURE__*/_jsxs(\"label\",{for:\"file\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-picture-o send-image-btn\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",id:\"file\",style:{display:'none'},accept:\"image/jpg,image/png,image/jpeg,image/gif\",onChange:sendImage})]}),/*#__PURE__*/_jsx(\"button\",{className:\"fa fa-smile-o send-emoji-btn\",\"aria-hidden\":\"true\",onClick:()=>{setShowEmojiPicker(!showEmojiPicker);}}),/*#__PURE__*/_jsx(\"button\",{className:\"fa fa-paper-plane send-message-btn\",\"aria-hidden\":\"true\",onClick:()=>sendMessage('')})]})]})});}export default ChatArea;","map":{"version":3,"names":["useDispatch","useSelector","createNewMessage","getAllMessages","hideLoader","showLoader","toast","useEffect","useState","clearUnreadMessageCount","moment","store","setAllChats","setSelectedChat","EmojiPicker","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ChatArea","_ref","socket","dispatch","selectedChat","user","allChats","state","userReducer","selectedUser","members","find","u","_id","message","setMessage","allMessages","setAllMessages","isTyping","setIsTyping","showEmojiPicker","setShowEmojiPicker","data","setData","sendMessage","image","newMessage","chatId","sender","text","emit","map","m","read","createdAt","format","response","success","error","formatTime","timestamp","now","diff","getMessages","clearUnreadMessages","chat","formatName","fname","firstname","at","toUpperCase","slice","toLowerCase","lname","lastname","sendImage","e","file","target","files","reader","FileReader","readAsDataURL","onloadend","result","_selectedChat$lastMes","lastMessage","off","on","getState","prevmsg","updatedChats","unreadMessageCount","prevMsgs","msg","setTimeout","msgContainer","document","getElementById","scrollTop","scrollHeight","children","class","className","id","isCurrentUserSender","style","justifyContent","src","alt","height","width","float","color","includes","display","padding","onEmojiClick","emoji","type","placeholder","value","onChange","for","accept","onClick"],"sources":["/Users/sewak/Desktop/quick-chat-application/client/src/pages/home/components/chat.js"],"sourcesContent":["\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createNewMessage, getAllMessages } from \"../../../apiCalls/message\";\r\nimport { hideLoader, showLoader } from \"../../../redux/loaderSlice\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { clearUnreadMessageCount } from './../../../apiCalls/chat';\r\nimport moment from \"moment\";\r\nimport store from './../../../redux/store';\r\nimport { setAllChats, setSelectedChat } from \"../../../redux/usersSlice\";\r\nimport EmojiPicker from \"emoji-picker-react\";\r\n\r\nfunction ChatArea({ socket }){\r\n    const dispatch = useDispatch();\r\n    const { selectedChat, user, allChats } = useSelector(state => state.userReducer);\r\n    const selectedUser = selectedChat.members.find( u => u._id !== user._id);\r\n    const [message, setMessage] = useState('');\r\n    const [allMessages, setAllMessages] = useState([]);\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n    const [data, setData] = useState(null);\r\n\r\n    const sendMessage = async (image) => {\r\n        try{\r\n            const newMessage = {\r\n                chatId: selectedChat._id,\r\n                sender: user._id,\r\n                text: message,\r\n                image: image\r\n            }\r\n\r\n            socket.emit('send-message', {\r\n                ...newMessage,\r\n                members: selectedChat.members.map(m => m._id),\r\n                read: false,\r\n                createdAt: moment().format(\"YYYY-MM-DD HH:mm:ss\")\r\n            })\r\n\r\n            const response = await createNewMessage(newMessage);\r\n\r\n            if(response.success){\r\n                setMessage('');\r\n                setShowEmojiPicker(false);\r\n            }\r\n        }catch(error){\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n\r\n    const formatTime = (timestamp) => {\r\n        const now = moment();\r\n        const diff = now.diff(moment(timestamp), 'days')\r\n\r\n        if(diff < 1){\r\n            return `Today ${moment(timestamp).format('hh:mm A')}`;\r\n        }else if(diff === 1){\r\n            return `Yesterday ${moment(timestamp).format('hh:mm A')}`;\r\n        }else {\r\n            return moment(timestamp).format('MMM D, hh:mm A');\r\n        }\r\n    }\r\n\r\n    const getMessages = async () => {\r\n        try{\r\n            dispatch(showLoader())\r\n            const response = await getAllMessages(selectedChat._id);\r\n            dispatch(hideLoader())\r\n\r\n            if(response.success){\r\n                setAllMessages(response.data);\r\n            }\r\n        }catch(error){\r\n            dispatch(hideLoader());\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n\r\n    const clearUnreadMessages = async () => {\r\n        try{\r\n            socket.emit('clear-unread-messages', {\r\n                chatId: selectedChat._id,\r\n                members: selectedChat.members.map(m => m._id)\r\n            })\r\n            const response = await clearUnreadMessageCount(selectedChat._id);\r\n\r\n            if(response.success){\r\n                allChats.map(chat => {\r\n                    if(chat._id === selectedChat._id){\r\n                        return response.data;\r\n                    }\r\n                    return chat;\r\n                })\r\n            }\r\n        }catch(error){\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n\r\n    function formatName(user){\r\n        let fname = user.firstname.at(0).toUpperCase() + user.firstname.slice(1).toLowerCase();\r\n        let lname = user.lastname.at(0).toUpperCase() + user.lastname.slice(1).toLowerCase();\r\n        return fname + ' ' + lname;\r\n    }\r\n\r\n    const sendImage = async (e) => {\r\n        const file = e.target.files[0];\r\n        const reader = new FileReader(file);\r\n        reader.readAsDataURL(file);\r\n\r\n        reader.onloadend = async () => {\r\n            sendMessage(reader.result);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getMessages();\r\n        if(selectedChat?.lastMessage?.sender !== user._id){\r\n         clearUnreadMessages();\r\n        }\r\n\r\n        socket.off('receive-message').on('receive-message', (message) => {\r\n            const selectedChat = store.getState().userReducer.selectedChat;\r\n            if(selectedChat._id === message.chatId){\r\n                setAllMessages(prevmsg => [...prevmsg, message]);\r\n            }\r\n\r\n            if(selectedChat._id === message.chatId && message.sender !== user._id){\r\n                clearUnreadMessages();\r\n            }\r\n        })\r\n\r\n        socket.on('message-count-cleared', data => {\r\n            const selectedChat = store.getState().userReducer.selectedChat;\r\n            const allChats = store.getState().userReducer.allChats;\r\n\r\n            if(selectedChat._id === data.chatId){\r\n                //UPDATING UNREAD MESSAGE COUNT IN CHAT OBJECT\r\n                const updatedChats = allChats.map(chat => {\r\n                    if(chat._id === data.chatId){\r\n                        return { ...chat, unreadMessageCount: 0}\r\n                    }\r\n                    return chat;\r\n                })\r\n                dispatch(setAllChats(updatedChats));\r\n\r\n                //UPDATING READ PROPRTY IN MESSAGE OBJECT\r\n                setAllMessages(prevMsgs => {\r\n                    return prevMsgs.map(msg => {\r\n                        return {...msg, read: true}\r\n                    })\r\n                })\r\n            }\r\n        })\r\n\r\n        socket.on('started-typing', (data) => {\r\n            setData(data);\r\n            if(selectedChat._id === data.chatId && data.sender !== user._id){\r\n                setIsTyping(true);\r\n                setTimeout(() => {\r\n                    setIsTyping(false);\r\n                }, 2000)\r\n            }\r\n        })\r\n    }, [selectedChat])\r\n\r\n    useEffect(() => {\r\n        const msgContainer = document.getElementById('main-chat-area');\r\n        msgContainer.scrollTop = msgContainer.scrollHeight;\r\n    }, [allMessages, isTyping])\r\n\r\n    return <>\r\n            {selectedChat && <div class=\"app-chat-area\">\r\n                    <div class=\"app-chat-area-header\">\r\n                        { formatName(selectedUser)}\r\n                    </div>\r\n\r\n                    <div className=\"main-chat-area\" id=\"main-chat-area\">\r\n                        { allMessages.map(msg => {\r\n                            const isCurrentUserSender = msg.sender === user._id;\r\n\r\n                            return <div className=\"message-container\" style={isCurrentUserSender ? {justifyContent: 'end'} : {justifyContent: 'start'}}>\r\n                                        <div>\r\n                                            <div className={isCurrentUserSender ? \"send-message\" : \"received-message\"}>\r\n                                                <div>{ msg.text }</div>\r\n                                                <div>{msg.image && <img src={msg.image} alt=\"image\" height=\"120\" width=\"120\"></img>}</div>\r\n                                            </div>\r\n                                            <div className=\"message-timestamp\" \r\n                                                 style={isCurrentUserSender ? {float: 'right'} : {float: 'left'}}\r\n                                            >\r\n                                                { formatTime(msg.createdAt) } {isCurrentUserSender && msg.read && \r\n                                                    <i className=\"fa fa-check-circle\" aria-hidden=\"true\" style={{color: '#e74c3c'}}></i>\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                        })}\r\n                        <div className=\"typing-indicator\">\r\n                            {isTyping && selectedChat?.members.map(m => m._id).includes(data?.sender) && <i>typing...</i>}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {showEmojiPicker && \r\n                        <div style={{width: '100%', display: 'flex', padding: '0px 20px', justifyContent: 'right'}}>\r\n                            <EmojiPicker style={{width: '300px', height: '400px'}} onEmojiClick={(e) => setMessage(message + e.emoji)}></EmojiPicker>\r\n                        </div>\r\n                    }\r\n                    <div className=\"send-message-div\">\r\n                        <input type=\"text\" \r\n                            className=\"send-message-input\" \r\n                            placeholder=\"Type a message\"\r\n                            value={message}\r\n                            onChange={ (e) => { \r\n                                setMessage(e.target.value)\r\n                                socket.emit('user-typing', {\r\n                                    chatId: selectedChat._id,\r\n                                    members: selectedChat.members.map(m => m._id),\r\n                                    sender: user._id\r\n                                })\r\n                            } \r\n                        }\r\n                        />\r\n                        \r\n                        <label for=\"file\">\r\n                            <i className=\"fa fa-picture-o send-image-btn\"></i>\r\n                            <input\r\n                                type=\"file\"\r\n                                id=\"file\"\r\n                                style={{display: 'none'}}\r\n                                accept=\"image/jpg,image/png,image/jpeg,image/gif\"\r\n                                onChange={sendImage}\r\n                            >\r\n                            </input>\r\n                        </label>\r\n\r\n                        <button \r\n                            className=\"fa fa-smile-o send-emoji-btn\" \r\n                            aria-hidden=\"true\"\r\n                            onClick={ () => { setShowEmojiPicker(!showEmojiPicker)} }>\r\n                        </button>\r\n                        <button \r\n                            className=\"fa fa-paper-plane send-message-btn\" \r\n                            aria-hidden=\"true\"\r\n                            onClick={ () => sendMessage('') }>\r\n                        </button>\r\n                    </div>\r\n                </div>}\r\n        </>\r\n}\r\n\r\nexport default ChatArea;    "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}